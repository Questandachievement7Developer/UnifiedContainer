#!/bin/bash
echo "Manager Update codename: Tracing the bulk"
export PrimaryParam=${1}
export SecondaryParam=${2}
export TertiaryParam=${3}
#set -x
#echo DEBUG PARAM CHECK ${PrimaryParam} ${SecondaryParam}


#proot Seccomp Acceleration SEGFAULT CRASHES FIX
#export PROOT_NO_SECCOMP=1





export initDir="$(pwd)"


red(){
printf '\e[38;5;210m' > /dev/tty
}

yellow(){
printf '\e[38;5;221m' > /dev/tty
}
green(){
printf '\e[38;5;042m' > /dev/tty
}
blue(){
printf '\e[38;5;039m' > /dev/tty
}

gray(){
printf '\e[38;5;037m' > /dev/tty
}

export red='\e[38;5;210m'
export yellow='\e[38;5;221m'
export green='\e[38;5;042m'
export blue='\e[38;5;039m'
export gray='\e[38;5;037m'


export pbadge="[Unified Container Manager]:"


intro(){

if [ ${newInstall} == '1' ]; then
  clear
blue
echo "==================================================================="
green
echo "😊 Warm welcome from questandachievement7Developer 😊"
echo "🎆✨ Welcome to unifiedContainer Project✨🎆"
echo "👉 Heavily Inspired by docker, multipass, termuxarch sdrausty, and neoOli bootstrap 👍"
echo "👉 Code sourced from MFDGaming NeoOli and Stackoverflow 👍"
blue
echo "==================================================================="

sleep 4
fi
}

paramCheck(){
#echo DEBUG PARAM CHECK ${PrimaryParam} ${SecondaryParam}
if [ -z ${PrimaryParam} ]; then
  red
  echo "${pbadge} 🤔 Invalid Sub command please refer help for manual 🤷"
  help_unifyServer
  exit
fi

if [ -z ${SecondaryParam} ]; then
  red
  echo "${pbadge} 🤔 no parameter detected please refer help for manual 🤷"
  help_unifyServer
  exit
fi

if [ ${SecondaryParam} == "default" ]; then
  clear
  red
  echo "${pbadge} Welco.. wait thats illegal! "
  exit
fi

}


confirmation(){
  randcode=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
  randcode="iwilltaketheresponsibilityofmyaction"
  yellow
  echo "${pbadge} ⚠️ Are you sure that you want to do this ?⚠️"
  echo "${pbadge} if you do please type this token"
  echo "${randcode}"
  echo "Your input: "
  read input
  echo "debug ${input}"
  if [ $input == $randcode ] ; then
    yellow
    echo "${pbadge} 🚀 Initiating dangerous code"
  else
    red
    echo "${pbadge} ❌ WRONG CODE CANCELLING ❌"
  exit
fi
}

nuke(){
confirmation
red
echo "${pbadge} 💣 Nuking the installation 💣"
rm -rf ${maindir}
green
echo "${pbadge} ✔️  Nuking complete ✔️ "
exit
}

launchcontainerSvcFG(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  green
  echo "⏳ Launching container ${SecondaryParam}"
  bash start-bootstrap.sh bash /init
  echo $! > svcID
  cat "${logs}/containers_${SecondaryParam}.log"
  exit
}

launchcontainerSvc(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  green
  echo "⏳ Launching container ${SecondaryParam}"
  bash start-bootstrap.sh bash /init > "${logs}/containers_${SecondaryParam}.log" 2>&1 &
  echo $! > svcID
  cat "${logs}/containers_${SecondaryParam}.log"
  exit
}

launchcontainerKill(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  yellow
  echo "${pbadge} 🛑 Stopping Container"
  kill -9 $(cat ${containersLair}/${SecondaryParam}/svcID)
  green
  echo "${pbadge} ✔️ Container Stopped"
  exit
}

launchcontainerSHELL(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  echo Launching container ${SecondaryParam}
  green
  echo "${pbadge} 🌟 Have fun 🌟"
  #bash start-bootstrap.sh screenfetch
  bash start-bootstrap.sh "fish --login"
  exit
}

executeContainerCMD(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  yellow
  echo "${pbadge} 🏃‍ Executing ${TertiaryParam} on ${SecondaryParam}"
  bash start-bootstrap.sh "${TertiaryParam}"
  exit
}

containerManagerImport(){
containerID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
export importedcontainer="${TMPFolder}/${containerID}"
git clone ${SecondaryParam} ${TMPFolder}/${containerID}
if [ ! -d "${TMPFolder}/${containerID}" ]; then
  red
  echo "${pbadge} ❌ Imported Container does not exists ❌"
  exit
fi
name=$(cat ${importedcontainer}/name)
packages=$(cat ${importedcontainer}/packages)
init=$(cat ${importedcontainer}/init)
setuproutines=$(cat ${importedcontainer}/setup)
cd ${origindir}
bash ${0} add ${name}
echo "${packages}" > ${containersLair}/${name}/rootfs/packages
for a in ${packages}; do
#bash ${0} exec ${name} "apt install -y < /packages"
yellow
echo "${pbadge} ⌛ Installing ${a} "
bash ${0} exec ${name} "pacman -Sy --noconfirm ${a}" >> ${logs}/unifyServerPackageInstaller.log 2>&1
green
echo "${pbadge} ✔️ Done Installing ${a} "
done
echo "${SecondaryParam}" > ${containersLair}/${name}/origin
echo "${init}" > ${containersLair}/${name}/rootfs/init
echo "${setuproutines}" > ${containersLair}/${name}/rootfs/setup
echo "${pbadge} ✨Container Finishing touch✨"
bash ${0} exec ${name} "bash /setup"
green
echo "${pbadge} ✨import done✨"
exit
}

containerManagerExport(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
name=${SecondaryParam}
#bash ${0} exec ${SecondaryParam} "apt list --installed > /packages" #https://askubuntu.com/questions/9135/how-to-backup-settings-and-list-of-installed-packages
bash ${0} exec ${SecondaryParam} "pacman -Qqe > /packages"
packages=$(cat ${containersLair}/${SecondaryParam}/rootfs/packages)
init=$(cat ${containersLair}/${SecondaryParam}/rootfs/init)

mkdir ${containerExport}/${name}
echo "${name}" > ${containerExport}/${name}/name
echo "${packages}" > ${containerExport}/${name}/packages
echo "${init}" > ${containerExport}/${name}/init
#echo "apt-get update; apt-get upgrade; echo Default setup done" > ${containerExport}/${name}/setup
echo "pacman -Syu --noconfirm ; echo Default setup done" > ${containerExport}/${name}/setup
green
echo "${pbadge} ✨export done✨"
exit
}


containerManagerAdd(){
  if [ -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} Container Exists"
    exit
  else
    yellow
    echo "${pbadge} 📦 Creating Container"
    ${userspacebackend} ${symlinkfix} cp -ruaH "${defaultContainer}" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log 2>&1
    echo "$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)" > ${containersLair}/${SecondaryParam}/containerID
    echo "${pbadge} 📦 Creating Presistent data"
    mkdir "${presistentStorage}/$(cat ${containersLair}/${SecondaryParam}/containerID)"
    green
    echo "${pbadge} ${SecondaryParam} ✔️ Container done"
    echo "${SecondaryParam}" >> ${containerFilesList}
    exit
  fi

}

containerManagerReset(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
    confirmation
    yellow
    echo "${pbadge} 📦 Resetting Container"
    if [ -f "${containersLair}/${SecondaryParam}/origin" ]; then
      echo "${pbadge} 📦 Resetting Remote Container"
      originLink="$(cat ${containersLair}/${SecondaryParam}/origin)"
      cd ${origindir}
      rm -rf "${containersLair}/${SecondaryParam}"
      bash ${0} import "${originLink}"
    else
      echo "${pbadge} 📦 Resetting Local Container"
    rm -rf "${containersLair}/${SecondaryParam}"
    ${userspacebackend} ${symlinkfix} cp -ruaH "${defaultContainer}" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log  2>&1
  fi
    green
    echo "${pbadge} ${SecondaryParam} ✔️ Container done"
    exit
  fi

}


containerManagerrm(){
  confirmation
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
    yellow
    echo "${pbadge} 🗑️ Removing Container ${SecondaryParam}"
    rm -rf "${containersLair}/${SecondaryParam}"
    green
    echo "${pbadge} ✔️ Removing Finished"
    sed "s/${SecondaryParam}//" ${containerFilesList} > "${containersFilesList}_tmp"
    rm -rf ${containersFilesList}
    mv ${containersFilesList}_tmp ${containerFilesList}
    exit
  fi

}

editroutinesContainer(){
if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
else
    nano ${containersLair}/${SecondaryParam}/rootfs/init
    exit
fi
}

containerManagerLogs(){
if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
else
    less "${logs}/containers_${SecondaryParam}.log"
fi
}

installBin(){
echo ${PATH}
echo "${pbadge}stub"
#if [ ]
bayd="${maindir}/bay"
cat > "$bayd" <<- EOM
## This is a execution Routines that changes how the container behaves
## you can start a script or anything you want in here
export binloc="../${maindir}/unifyServer"
bash ${binloc} \$@
EOM
}

daemonCreate(){
echo "${pbadge}stub"
bayd="${maindir}/bayd"
cat > "$bayd" <<- EOM
## This is a execution Routines that changes how the container behaves
## you can start a script or anything you want in here
export binloc="../${maindir}/unifyServer"
cd ${maindir}
for a in \$(cat ${containerFilesList}); do
  bash ${binloc} launch ${a}
done
EOM
}



help_unifyServer(){
yellow
echo "${pbadge} Here are the commands"
echo "To launch container"
echo "${0} launch <containerName>"
echo "To Launch container in foreground"
echo "${0} launchfg <containerName>"
echo .
echo "To Stop container"
echo "${0} stop <containerName>"
echo .
echo "To Read Container Log"
echo "${0} logs <containerName>"
echo .
echo "To Grant local storage for the container"
echo "${0} exposeStorage <containerName>"
echo .
echo "To isolate local storage from the container"
echo "${0} deexposeStorage <containerName>"
echo .
echo "Export Container Configuration "
echo "${0} exportCont <containerName>"
echo .
echo "reset container to default configuration"
echo "${0} reset <containerName>"
echo .
echo "List all the container and its status"
echo "${0} list All"
echo .
echo "reset Everything"
echo "DO THIS ONLY WHEN YOU HAVE A PROBLEM LIKE CORRUPTED INSTALLATION"
echo "${0} nuke yes"
echo .
echo "refresh main container"
echo "refresh main container to upgrade new bootloader version or fix unpredicter errors"
echo "${0} refresh yes"
echo .
echo "install program"
echo "This allows the unifiedContainer Technology to be installed and called easily "
echo "When program is installed it can be called \$bay param param"
echo "${0} install yes"
echo .
echo "to enter the container Shell"
echo "${0} shell <containerName>"
echo .
echo "upgrade Container to newer version"
echo "${0} upgrade <containerName>"
echo .
echo "To execute a command on a container"
echo "${0} exec <containerName> <command>"
echo .
echo "To add container"
echo "${0} add <containerName>"
echo .
echo "To remove Container"
echo "${0} remove <containerName>"
echo .
echo "To edit exec Routines container"
echo "${0} edit_routines <containerName>"
exit
}


paramintrepreter(){
case ${PrimaryParam} in
  launch)
    launchcontainerSvc ;;
  install)
    linkManagerPath ;;
  refresh)
    upgradeMainContainer ;;
  logs)
    containerManagerLogs ;;
  launchfg)
    launchcontainerSvcFG ;;
  import)
    containerManagerImport ;;
  exportCont)
    containerManagerExport ;;
  exposeStorage)
    containerManagerExposeStorage ;;
  deexposeStorage)
    containerManagerDeExposeStorage ;;
  reset)
    containerManagerReset ;;
  list)
    containerManagerList ;;
  stop)
      launchcontainerKill ;;
  nuke)
    nuke ;;
  shell)
    launchcontainerSHELL ;;
  exec)
    executeContainerCMD ;;
  add)
    containerManagerAdd ;;
  upgrade)
    containerManagerUpgrade ;;
  remove)
    containerManagerrm ;;
  edit_routines)
    editroutinesContainer ;;
  *)
    help_unifyServer ;;
esac

# if the bash is recognized this one rather the real one
# then it have a big problem

# bash does not recognize this function
linkManagerPath(){
if [ ! -z "${PREFIX}" ]; then
echo "${pbadge} PREFIX VARIABLE IS DETECTED WE ARE GOING TO INSTALL THERE"
installTarget="${PREFIX}/bin"
else
installTarget="/usr/local/bin"
fi
managerExec="${installTarget}/bay"
echo "cd ${origindir} ; bash ./unifyServer $1 \$2 \$3 " > "${managerExec}"
chmod 777 "${managerExec}"
echo "${pbadge} Installation is successfull"
exit
}

upgradeMainContainer(){
rm -rf ${defaultContainer}
export newInstall=1
defaultContainerSetup
}

}
containerManagerUpgrade(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
cd ${containersLair}/${SecondaryParam}
yellow
echo "${pbadge} ⌛ Upgrading container"
${userspacebackend} ${symlinkfix} cp -ruaH "${defaultContainer}/*" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log 2>&1
green
echo "${pbadge} ✔️ Container has been upgraded "
exit
  fi
}
containerManagerDeExposeStorage(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
rm ${containersLair}/${SecondaryParam}/grantStorage
green
echo "${pbadge} ✔️ Local Storage Denied "
exit
fi

}

containerManagerExposeStorage(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    echo "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
echo a > ${containersLair}/${SecondaryParam}/grantStorage
green
echo "${pbadge} ✔️ Local Storage Granted "
exit
fi

}

containerManagerList(){
list=$(cat ${containerFilesList})
clear
yellow
echo "=============[ Containers Status ]=============="
for a in ${list}; do
  blue
echo "================================================"
green
echo "----💽 Container: ${a}"
echo "Container ID : $(cat ${containersLair}/${a}/containerID)"
if [ -f ${containersLair}/${a}/origin ];then
echo "🗺️ Origin : $(cat ${containersLair}/${a}/origin)"
else
echo "🗺️ Origin : Created Locally"
fi
yellow
echo "----ℹ️ Status:"
echo "Disk Info: "
echo $(du -s ${containersLair}/${a}/rootfs)
echo "Local Data Access Permission :"
if [ -f ${containersLair}/${a}/grantStorage ]; then
  green
echo "✔️ Container have a local storage Access"
else
  red
echo "❌The Container is isolated from the local storage"
fi
if [ -d ${presistentStorage}/$(cat ${containersLair}/${a}/containerID) ]; then
  red
echo "❌The Container does not support presistent storage yet"
yellow
echo "ALERT WITHOUT THE SUPPORT OF PRESISTENT STORAGE THE CONTAINER WHEN RESET or REMOVED WILL NOT SAVE DATA"
echo "Please upgrade as soon as possible"
else
green
echo "✔️ The container supports presistent storage"
fi
yellow
echo "----📜 Container Boot status : "
if [ -f ${containersLair}/${a}/boot ]; then
  green
echo "✔️ Container is booted up"
echo "✔️ Container init ID : $(cat ${containersLair}/${a}/svcID)"
else
  red
echo "❌Container is Not booted up"
fi
blue
echo "================================================"
done
exit
}

folderInit(){
export origindir=$(pwd)
export maindir="${initDir}/containersys"
export presistentStorage="${maindir}/presistent_storage"
export containersLair="${maindir}/containers"
export defaultContainer="${containersLair}/default"
export Loader="${maindir}/loader"
export TMPFolder="${maindir}/tmp"
export logs="${maindir}/logs"
export containerExport=${maindir}/containerExport
export containerFilesList="${maindir}/containers.txt"
if [ ! -d ${maindir} ]; then
  mkdir ${maindir}
fi

if [ ! -d ${presistentStorage} ]; then
  mkdir ${presistentStorage}
fi

if [ ! -d ${containerExport} ]; then
  mkdir ${containerExport}
fi

if [ ! -d ${TMPFolder} ]; then
  mkdir ${TMPFolder}
fi

if [ ! -d ${logs} ]; then
  mkdir ${logs}
fi

if [ ! -d ${containersLair} ]; then
  mkdir ${containersLair}
fi

if [ ! -d ${defaultContainer} ]; then
  mkdir ${defaultContainer}
  export newInstall=1
else
  export newInstall=0
fi

if [ ! -d ${loader} ]; then
  mkdir ${loader}
fi

}


SUrequest(){
echo Must be root
if [ $(whoami) != "root" ]; then
if [ -z $(which sudo) ];then
echo Restarting...
export rootRequested=1
#su -c "bash ${0}"
sudo bash ${0}
else
echo Restarting...
export rootRequested=1
sudo env rootRequested=1 sh "${0}"
fi
exit
fi
}


distroDetection(){
# DISTRO MANAGER DETECTION IS ALSO USED TO DETERMINE WHERE DOES THE SCRIPT RUN
export ptracecompat='1' #flag ptrace compatibility based on the distro or kernel that its running
export linktosymlinkActivated=0
export arch=$(uname -m)
if [ ! -z $(which apk) ]; then
  echo "THIS MIGHT BE RUNNING ON iSH which Does not support Ptrace"
  export packmanager=apk
  export installParameter="add"
  export ptracecompat='0'
fi

if [ ! -z $(which apt) ]; then
export packmanager="apt"
export installParameter="install -y"
fi
    if [ ! -z $(which pkg) ]; then
    export packmanager=pkg
    export installParameter="install -y"
    export linktosymlinkActivated=1
    echo Termux Detected

    fi


    if [ ! -z $(which yum) ]; then
    export packmanager="yum"
    export installParameter="install -y"
    fi

    if [[ $(grep Microsoft /proc/version) ]]; then
      echo "Bash is running on WSL"
      echo "PTRACE ON WSL 1 IS NOT SUPPORTED"
      export ptracecompat='0'
    fi

    if [ ! -z $(which pacman) ]; then
    export packmanager="pacman"
    export installParameter="-Sy --noconfirm"
    echo Redownloading Databases
    pacman -Syy
    fi

    if [ ! -z $(which easy_install) ]; then
    export pyPacman="easy_install"
    export pyInstallParam=""
    fi

    if [ ! -z $(which pip) ]; then
    export pyPacman="pip"
    export pyInstallParam="install"
    fi


}


dependencies(){
if [ ${newInstall} == "1" ]; then
if [ ! -z $(which apt-get) ]; then
  export packmanager="apt-get"
  export installParameter="install -y"
  fi
  if [ ! -z $(which add-apt-repository) ]; then
  export packmanager="apt-get"
  export installParameter="install -y"
  echo Apt detected doing some special treatment
  add-apt-repository universe
  echo Refreshing Repo
  apt-get update
  fi
  distroDetection
  export distComplete="$(uname -a)"

  requirements="chroot busybox wget git proot"
 echo "echo Installing 🔧" > ${TMPFolder}/SUINSTALL
  for i in ${requirements}; do
    green
    echo "echo ${pbadge} Installing 🔧 ${i}" >> ${TMPFolder}/SUINSTALL
    echo "${packmanager} ${installParameter} ${i}" >> ${TMPFolder}/SUINSTALL
  done
# This installation scheme were changed due to the fact old SU request created a unresolvable and wierd bug like Missing (Expected fi) from intrepretation
if [ ${packmanager} != "pkg" ] && [ -z ${rootRequested} ]; then
sudo "bash ${TMPFolder}/SUINSTALL"
else
bash ${TMPFolder}/SUINSTALL
fi

#alternative for proot
  if [ -z $(which proot) ]; then
    echo "proot not available?"
    case $(checkArch) in
		aarch64)
			archurl="arm64" ;;
		arm)
			archurl="arm" ;;
		amd64)
			archurl="x86_64" ;;
		i*86)
			archurl="x86" ;;
		x86_64)
			archurl="x86_64" ;;
		*)
			echo "unknown architecture"; exit 1 ;;
		esac
  if [ ! -f ${loader}/proot ]; then
  wget "https://github.com/proot-me/proot-static-build/blob/master/static/proot-${archurl}"
  chmod +x proot-${archurl}
  mv proot-${archurl} ${loader}/proot
  fi
  export PATH=${PATH}:${loader}
  fi

else
  distroDetection
echo Does not need dependencies install
fi



if [ -z $(which proot) ] && [ ${ptracecompat} == '1' ]; then
  echo "${pbadge} NO PROOT BUT SUPPORT PTRACE"
  exit
fi

if [ -z $(which git) ] || [ -z $(which busybox) ] || [ -z $(which chroot) ]; then
echo "${pbadge} DEPENDENCIES ARE NOT INSTALLED NUKING IS REQUIRED"
nuke
exit
fi



}

checkArch(){
currarch=$(uname -m)
echo ${currarch}
}


# This fucntion will attempt to stop booting if the non supported linux ptrace is currently running
ptraceCompatibilityPolice(){
  if [ ${ptracecompat} == '0' ]; then
  userspacebackend=''
    red
  echo "${pbadge} ❌ This UnifiedContainer currently running on a non ptrace kernel ❌"
  echo a > ${maindir}/NOPTRACE
    if [ $(whoami) != "root" ]; then
      echo "${pbadge} ❌ Non ptrace kernel need to launch the manager using superuser previledges ❌"
      exit
    fi
  else
    userspacebackend='proot -0'
  fi
}





bootstrapSetup(){

folder=rootfs
if [ -d "$folder" ]; then
	first=1
  green
	echo "${pbadge} ⏭️ skipping downloading"
fi
tarball="bootstrap.tar.gz"
if [ "$first" != 1 ];then
	if [ ! -f $tarball ]; then
    yellow
		echo "${pbadge} ⌛ downloading bootstrap-image"
		#case `dpkg --print-architecture` in
    #wget -r --no-parent -A 'bar.*.tar.gz' http://url/dir/ #https://unix.stackexchange.com/questions/117988/wget-with-wildcards-in-http-downloads
    case `checkArch` in #since Archlinux have a variable download link so we have to define each download link for each architechture
		aarch64)
			archurl="arm64" ; specialarchtype="arm" ; downloadcompass="http://os.archlinuxarm.org/o
