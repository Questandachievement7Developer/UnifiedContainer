#!/bin/bash
echo Ver 010
export PrimaryParam=${1}
export SecondaryParam=${2}
export TertiaryParam=${3}
set +xe
#echo DEBUG PARAM CHECK ${PrimaryParam} ${SecondaryParam}

export initDir="$(pwd)"


red(){
printf '\e[38;5;210m' > /dev/tty
}

yellow(){
printf '\e[38;5;221m' > /dev/tty
}
green(){
printf '\e[38;5;042m' > /dev/tty
}
blue(){
printf '\e[38;5;039m' > /dev/tty
}

gray(){
printf '\e[38;5;037m' > /dev/tty
}

export red='\e[38;5;210m'
export yellow='\e[38;5;221m'
export green='\e[38;5;042m'
export blue='\e[38;5;039m'
export gray='\e[38;5;037m'


export pbadge="${blue}[${yellow}unifiedContainer${blue}]:${gray}"


intro(){

if [ ${newInstall} == '1' ]; then
  clear
blue
printf "==================================================================="
green
printf "😊 Warm welcome from questandachievement7Developer 😊"
printf "🎆✨ Welcome to unifiedContainer Project✨🎆"
printf "👉 Heavily Inspired by docker, multipass, termuxarch sdrausty, and neoOli Ubuntu 👍"
printf "👉 Code sourced from MFDGaming NeoOli and Stackoverflow 👍"
blue
printf "==================================================================="

sleep 4
fi
}

paramCheck(){
#echo DEBUG PARAM CHECK ${PrimaryParam} ${SecondaryParam}
if [ -z ${PrimaryParam} ]; then
  red
  printf "${pbadge} 🤔 Invalid Sub command please refer help for manual 🤷"
  help_unifyServer
  exit
fi

if [ -z ${SecondaryParam} ]; then
  red
  printf "${pbadge} 🤔 no parameter detected please refer help for manual 🤷"
  help_unifyServer
  exit
fi

if [ ${SecondaryParam} == "default" ]; then
  clear
  red
  printf "${pbadge} Welco.. wait thats illegal! "
  exit
fi

}


help_unifyServer(){
yellow
printf "${pbadge} Here are the commands"
printf "To launch container"
printf "${0} launch <containerName>"
echo .
printf "To Stop container"
printf "${0} stop <containerName>"
echo .
printf "To Grant local storage for the container"
printf "${0} exposeStorage <containerName>"
echo .
printf "To isolate local storage from the container"
printf "${0} deexposeStorage <containerName>"
echo .
printf "Export Container Configuration "
printf "${0} exportCont <containerName>"
echo .
printf "reset container to default configuration"
printf "${0} reset <containerName>"
echo .
printf "List all the container and its status"
printf "${0} list All"
echo .
printf "reset Everything"
printf "DO THIS ONLY WHEN YOU HAVE A PROBLEM LIKE CORRUPTED INSTALLATION"
printf "${0} nuke yes"
echo .
printf "to enter the container Shell"
printf "${0} shell <containerName>"
echo .
printf "To execute a command on a container"
printf "${0} exec <containerName> <command>"
echo .
printf "To add container"
printf "${0} add <containerName>"
echo .
printf "To remove Container"
printf "${0} remove <containerName>"
echo .
printf "To edit exec Routines container"
printf "${0} edit_routines <containerName>"
exit
}

confirmation(){
  randcode=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
  randcode="iwilltaketheresponsibilityofmyaction"
  yellow
  printf "${pbadge} ⚠️ Are you sure that you want to do this ?⚠️"
  printf "${pbadge} if you do please type this token"
  printf "${randcode}"
  printf "Your input: "
  read input
  printf "debug ${input}"
  if [ $input == $randcode ] ; then
    yellow
    printf "${pbadge} 🚀 Initiating dangerous code"
  else
    red
    printf "${pbadge} ❌ WRONG CODE CANCELLING ❌"
  exit
fi
}

nuke(){
confirmation
red
printf "${pbadge} 💣 Nuking the installation 💣"
rm -rf ${maindir}
green
printf "${pbadge} ✔️  Nuking complete ✔️ "
exit
}

launchcontainerSvc(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  green
  printf "⏳ Launching container ${SecondaryParam}"
  bash start-ubuntu.sh bash /init > "${logs}/containers_${SecondaryParam}.log" 2>&1 &
  echo $! > svcID
  cat "${logs}/containers_${SecondaryParam}.log"
  exit
}

launchcontainerKill(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  yellow
  printf "${pbadge} 🛑 Stopping Container"
  kill -9 $(cat ${containersLair}/${SecondaryParam}/svcID)
  green
  printf "${pbadge} ✔️ Container Stopped"
  exit
}

launchcontainerSHELL(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  echo Launching container ${SecondaryParam}
  green
  printf "${pbadge} 🌟 Have fun 🌟"
  bash start-ubuntu.sh screenfetch
  bash start-ubuntu.sh "fish --login"
  exit
}

executeContainerCMD(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
  cd "${containersLair}/${SecondaryParam}"
  yellow
  printf "${pbadge} 🏃‍ Executing ${TertiaryParam} on ${SecondaryParam}"
  bash start-ubuntu.sh "${TertiaryParam}"
  exit
}

containerManagerImport(){
containerID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
export importedcontainer="${TMPFolder}/${containerID}"
git clone ${SecondaryParam} ${TMPFolder}/${containerID}
if [ ! -d "${TMPFolder}/${containerID}" ]; then
  red
  printf "${pbadge} ❌ Imported Container does not exists ❌"
  exit
fi
name=$(cat ${importedcontainer}/name)
packages=$(cat ${importedcontainer}/packages)
init=$(cat ${importedcontainer}/init)
setuproutines=$(cat ${importedcontainer}/setup)
cd ${origindir}
bash ${0} add ${name}
printf "${packages}" > ${containersLair}/${name}/rootfs/packages
bash ${0} exec ${name} "apt install < /packages"
printf "${SecondaryParam}" > ${containersLair}/${name}/origin
printf "${init}" > ${containersLair}/${name}/rootfs/init
printf "${setuproutines}" > ${containersLair}/${name}/rootfs/setup
printf "${pbadge} ✨Container Finishing touch✨"
bash ${0} exec ${name} "bash /setup"
green
printf "${pbadge} ✨import done✨"
exit
}

containerManagerExport(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  fi
name=${SecondaryParam}
bash ${0} exec ${SecondaryParam} "apt list --installed > /packages" #https://askubuntu.com/questions/9135/how-to-backup-settings-and-list-of-installed-packages
packages=$(cat ${containersLair}/${SecondaryParam}/rootfs/packages)
init=$(cat ${containersLair}/${SecondaryParam}/rootfs/init)

mkdir ${containerExport}/${name}
printf "${name}" > ${containerExport}/${name}/name
printf "${packages}" > ${containerExport}/${name}/packages
printf "${init}" > ${containerExport}/${name}/init
printf "apt-get update; apt-get upgrade; echo Default setup done" > ${containerExport}/${name}/setup
green
printf "${pbadge} ✨export done✨"
exit
}


containerManagerAdd(){
  if [ -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} Container Exists"
    exit
  else
    yellow
    printf "${pbadge} 📦 Creating Container"
    proot --link2symlink -0 cp -ruaH "${defaultContainer}" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log 2>&1
    printf "$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)" > ${containersLair}/${SecondaryParam}/containerID
    green
    printf "${pbadge} ${SecondaryParam} ✔️ Container done"
    printf "${SecondaryParam}" >> ${containerFilesList}
    exit
  fi

}

containerManagerReset(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
    confirmation
    yellow
    printf "${pbadge} 📦 Resetting Container"
    if [ -f "${containersLair}/${SecondaryParam}/origin" ]; then
      printf "${pbadge} 📦 Resetting Remote Container"
      originLink="$(cat ${containersLair}/${SecondaryParam}/origin)"
      cd ${origindir}
      rm -rf "${containersLair}/${SecondaryParam}"
      bash ${0} import "${originLink}"
    else
      printf "${pbadge} 📦 Resetting Local Container"
    rm -rf "${containersLair}/${SecondaryParam}"
    proot --link2symlink -0 cp -ruaH "${defaultContainer}" "${containersLair}/${SecondaryParam}" >> ${logs}/rootfsCopyOperation.log  2>&1
  fi
    green
    printf "${pbadge} ${SecondaryParam} ✔️ Container done"
    exit
  fi

}


containerManagerrm(){
  confirmation
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
    yellow
    printf "${pbadge} 🗑️ Removing Container ${SecondaryParam}"
    rm -rf "${containersLair}/${SecondaryParam}"
    green
    printf "${pbadge} ✔️ Removing Finished"
    sed "s/${SecondaryParam}//" ${containerFilesList} > "${containersFilesList}_tmp"
    rm -rf ${containersFilesList}
    mv ${containersFilesList}_tmp ${containerFilesList}
    exit
  fi

}

editroutinesContainer(){
if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
else
    nano ${containersLair}/${SecondaryParam}/rootfs/init
    exit
fi


}

paramintrepreter(){
case ${PrimaryParam} in
  launch)
    launchcontainerSvc ;;
  import)
    containerManagerImport ;;
  exportCont)
    containerManagerExport ;;
  exposeStorage)
    containerManagerExposeStorage ;;
  deexposeStorage)
    containerManagerDeExposeStorage ;;
  reset)
    containerManagerReset ;;
  list)
    containerManagerList ;;
  stop)
      launchcontainerKill ;;
  nuke)
    nuke ;;
  shell)
    launchcontainerSHELL ;;
  exec)
    executeContainerCMD ;;
  add)
    containerManagerAdd ;;
  remove)
    containerManagerrm ;;
  edit_routines)
    editroutinesContainer ;;
  *)
    help_unifyServer ;;
esac

}

containerManagerDeExposeStorage(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
rm ${containersLair}/${SecondaryParam}/grantStorage
green
printf "${pbadge} ✔️ Local Storage Denied "
exit
fi

}

containerManagerExposeStorage(){
  if [ ! -d "${containersLair}/${SecondaryParam}" ]; then
    red
    printf "${pbadge} ❌ Container does not exists please create the container first ❌"
    exit
  else
echo a > ${containersLair}/${SecondaryParam}/grantStorage
green
printf "${pbadge} ✔️ Local Storage Granted "
exit
fi

}

containerManagerList(){
list=$(cat ${containerFilesList})
clear
yellow
printf "=============[ Containers Status ]=============="
for a in ${list}; do
  blue
printf "================================================"
green
printf "----💽 Container: ${a}"
printf "Container ID : $(cat ${containersLair}/${a}/containerID)"
if [ -f ${containersLair}/${a}/origin ];then
printf "🗺️ Origin : $(cat ${containersLair}/${a}/origin)"
else
printf "🗺️ Origin : Created Locally"
fi
yellow
printf "----ℹ️ Status:"
printf "Disk Info: "
echo $(du -s ${containersLair}/${a}/rootfs)
printf "Local Data Access Permission :"
if [ -f ${containersLair}/${a}/grantStorage ]; then
  green
printf "✔️ Container have a local storage Access"
else
  red
printf "❌The Container is isolated from the local storage"
fi
yellow
printf "----📜 Container Boot status : "
if [ -f ${containersLair}/${a}/boot ]; then
  green
printf "✔️ Container is booted up"
printf "✔️ Container init ID : $(cat ${containersLair}/${a}/svcID)"
else
  red
printf "❌Container is Not booted up"
fi
blue
printf "================================================"
done
exit
}

folderInit(){
export origindir=$(pwd)
export maindir="${initDir}/containersys"
export containersLair="${maindir}/containers"
export defaultContainer="${containersLair}/default"
export Loader="${maindir}/loader"
export TMPFolder="${maindir}/tmp"
export logs="${maindir}/logs"
export containerExport=${maindir}/containerExport
export containerFilesList="${maindir}/containers.txt"
if [ ! -d ${maindir} ]; then
  mkdir ${maindir}
fi

if [ ! -d ${containerExport} ]; then
  mkdir ${containerExport}
fi

if [ ! -d ${TMPFolder} ]; then
  mkdir ${TMPFolder}
fi

if [ ! -d ${logs} ]; then
  mkdir ${logs}
fi

if [ ! -d ${containersLair} ]; then
  mkdir ${containersLair}
fi

if [ ! -d ${defaultContainer} ]; then
  mkdir ${defaultContainer}
  export newInstall=1
else
  export newInstall=0
fi

if [ ! -d ${loader} ]; then
  mkdir ${loader}
fi

}

defaultContainerSetup(){
if [ ${newInstall} == "1" ]; then
if [ -d ${defaultContainer} ]; then
cd ${defaultContainer}
ubuntuSetup
else
  red
printf "${pbadge} FATAL ERROR wowza What happened to the default container folder??"
exit
fi
else
  red
printf "${pbadge} default container is installed"
fi
}


SUrequest(){
echo Must be root
if [ $(whoami) != "root" ]; then
if [ -z $(which sudo) ];then
echo Restarting...
export rootRequested=1
su -c "sh ${0}"
else
echo Restarting...
export rootRequested=1
sudo env rootRequested=1 sh "${0}"
fi
exit
fi
}


dependencies(){
if [ ${newInstall} == "1" ]; then
  if [ ! -z $(which add-apt-repository) ]; then
  export packmanager=apt-get
  export installParameter="install -y"
  echo Apt detected doing some special treatment
  add-apt-repository universe
  echo Refreshing Repo
  apt-get update
  fi


  if [ ! -z $(which pkg) ]; then
  export packmanager=pkg
  export installParameter="install -y"
  echo Termux Detected

  fi

  if [ ! -z $(which yum) ]; then
  export packmanager=yum
  export installParameter="install -y"
  fi


  if [ ! -z $(which pacman) ]; then
  export packmanager=pacman
  export installParameter="-Sy --noconfirm"
  echo Redownloading Databases
  pacman -Syy
  fi

  if [ ! -z $(which easy_install) ]; then
  export pyPacman=easy_install
  export pyInstallParam=""
  fi

  if [ ! -z $(which pip) ]; then
  export pyPacman=pip
  export pyInstallParam="install"
  fi

  if [ ${packmanager} != "pkg" ] && [ -z ${rootRequested} ]; then
  SUrequest
  exit
  fi

  export distComplete="$(uname -a)"

  requirements="chroot busybox wget git proot"

  for i in ${requirements}; do
    green
    printf "${pbadge} Installing 🔧 ${i}"
    ${packmanager} ${installParameter} ${i}
  done

#alternative for proot
  if [ -z $(which proot) ]; then
    printf "proot not available?"
    case $(checkArch) in
		aarch64)
			archurl="arm64" ;;
		arm)
			archurl="arm" ;;
		amd64)
			archurl="x86_64" ;;
		i*86)
			archurl="x86" ;;
		x86_64)
			archurl="x86_64" ;;
		*)
			printf "unknown architecture"; exit 1 ;;
		esac
  if [ ! -f ${loader}/proot ]; then
  wget "https://github.com/proot-me/proot-static-build/blob/master/static/proot-${archurl}"
  chmod +x proot-${archurl}
  cp proot-${archurl} ${loader}/proot
  fi
  export PATH=${PATH}:${loader}
  fi

else
echo Does not need dependencies install
fi

}

checkArch(){
currarch=$(uname -m)
echo ${currarch}
}









ubuntuSetup(){
  #!/data/data/com.termux/files/usr/bin/bash
folder=rootfs
if [ -d "$folder" ]; then
	first=1
  green
	printf "${pbadge} ⏭️ skipping downloading"
fi
tarball="ubuntu.tar.gz"
if [ "$first" != 1 ];then
	if [ ! -f $tarball ]; then
    yellow
		printf "${pbadge} ⌛ downloading ubuntu-image"
		#case `dpkg --print-architecture` in
    case `checkArch` in
		aarch64)
			archurl="arm64" ;;
		arm)
			archurl="armhf" ;;
    armv7*)
  		archurl="armhf" ;;
		amd64)
			archurl="amd64" ;;
		i*86)
			archurl="i386" ;;
		x86_64)
			archurl="amd64" ;;
		*)
			printf "❌ unknown architecture ❌"; exit 1 ;;
		esac
    #https://github.com/MFDGaming/ubuntu-in-termux/blob/master/ubuntu.sh
    export UBUNTU_VERSION=19.10
    wget "http://cdimage.ubuntu.com/ubuntu-base/releases/${UBUNTU_VERSION}/release/ubuntu-base-${UBUNTU_VERSION}-base-${archurl}.tar.gz" -O ${tarball}
		#wget "https://partner-images.canonical.com/core/disco/current/ubuntu-disco-core-cloudimg-${archurl}-root.tar.gz" -O $tarball
	fi
	cur=`pwd`
	mkdir -p "$folder"
	cd "$folder"
  yellow
	printf "${pbadge} 🗜️ decompressing ubuntu image"
	proot --link2symlink tar -xf ${cur}/${tarball} --exclude='dev'||:
  stubs=()
  stubs+=('usr/bin/groups')
  green
  for f in ${stubs[@]};do
    printf "⌛ Writing Stubs (MFDGaming Version Fixes) \n"
    echo -e "#!/bin/sh\nexit" > "$f"
  done
  #proot --link2symlink tar -xf ${cur}/${tarball} --exclude='dev'||:
  yellow
	printf "${pbadge} 🌐 fixing nameserver, otherwise it can't connect to the internet \n "
	printf "nameserver 1.1.1.1" > etc/resolv.conf
  printf "⌛ Creating Mount Points \n"
  mkdir exposed data
	cd "$cur"
fi
mkdir -p binds



bin=start-ubuntu.sh

printf "${pbadge} 🚀 writing launch script"
cat > $bin <<- EOM
#!/bin/bash
cd \$(dirname \$0)
## unset LD_PRELOAD in case termux-exec is installed
unset LD_PRELOAD
command="proot"
command+=" --link2symlink"
command+=" -0"
command+=" -r $folder"
if [ -n "\$(ls -A binds)" ]; then
    for f in binds/* ;do
      . \$f
    done
fi
command+=" -b /dev"
if [ -d /sdcard ] && [ -f grantStorage ]; then
command+=" -b /sdcard:/exposed"
fi
if [ -d /home ] && [ -f grantStorage ]; then
  command+=" -b /home:/exposed"
fi
command+=" -b /proc"
## uncomment the following line to have access to the home directory of termux
#command+=" -b /data/data/com.termux/files/home:/root"
############ uncomment the following line to mount /sdcard directly to /
#command+=" -b /sdcard"
command+=" -w /root"
command+=" /usr/bin/env -i"
command+=" HOME=/root"
command+=" PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/games:/usr/local/games"
command+=" TERM=\$TERM"
command+=" LANG=C.UTF-8"
command+=" /bin/bash --login"
com="\$@"

if [ "\$2" == "/init" ]; then
echo a > boot
fi

if [ -z "\$1" ];then
    exec \$command
else
    \$command -c "\$com"
fi
if [ "\$2" == "/init" ]; then
rm boot
fi
EOM
execroutines=${folder}/init
cat > $execroutines <<- EOM
## This is a execution Routines that changes how the container behaves
## you can start a script or anything you want in here
printf "Hello world"
uname -a
EOM

printf "${pbadge} 🧳 Doing some initial Setup"
bash ${bin} "apt-get update"
bash ${bin} "apt-get install screenfetch fish -y"
printf "fixing shebang of $bin"
if [ ${packmanager} == "pkg" ]; then
termux-fix-shebang $bin
fi
printf "${pbadge} 🧳 making $bin executable"
chmod +x $bin
}


fetchUpdateManager(){
cd ${origindir}
git reset --hard
git pull
echo ${origindir}/${0}
chmod +x ${0}
}



#_________Main_________
intro
yellow
printf "${pbadge} 📁 Checking Folders"
folderInit
intro
yellow
printf "${pbadge} 🚒 Checking dependencies"
dependencies
yellow
printf "${pbadge} 💽 Updating Manager"
fetchUpdateManager
yellow
printf "${pbadge} 💽 Checking Default Container"
defaultContainerSetup
paramCheck
paramintrepreter
exit
#______END______
